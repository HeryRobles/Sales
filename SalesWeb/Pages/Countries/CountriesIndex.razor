@page "/countries"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Países</h3>

<a class="btn btn-info mb-3" href="/countries/create">Nuevo País</a>

<GenericList MyList = "Countries">
    <Body>
        <table class="table table-striped">
        <thead>
            <tr>
                <th>País</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var country in Countries)
            {
                <tr>
                    <td>
                        <a class="btn btn-info" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-warning btn-sm" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>
                    </td>
                    <td>
                        @country.Name
                    </td>
                </tr>
            }
        </tbody>
    </table>

    </Body>

</GenericList>


@code {
    public List<Country> Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si",
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/productos/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            }
        }

        
    }
}
